@using Microsoft.AspNetCore.Http
@using HistoryTracking.DAL.Enums
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">History Tracking POC</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @if (UserManager.CurrentUserType == UserType.SystemUser || UserManager.CurrentUserType == UserType.Distributor)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="users">
                    <span class="oi oi-list" aria-hidden="true"></span> Users
                </NavLink>
            </li>
        }
        @if (UserManager.CurrentUserType == UserType.Distributor || UserManager.CurrentUserType == UserType.Reseller)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="subscriptions" Match="NavLinkMatch.Prefix" style="font-size: 14px;">
                    <span class="oi oi-list" aria-hidden="true"></span> Subscriptions
                </NavLink>
            </li>
        } 
        @if (UserManager.CurrentUserType == UserType.Customer || UserManager.CurrentUserType == UserType.Reseller)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="orders">
                    <span class="oi oi-list" aria-hidden="true"></span> Orders
                </NavLink>
            </li>
        }
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="changes">
                <span class="oi oi-list" aria-hidden="true"></span> Activity History
            </NavLink>
        </li>
    </ul>
</div>

<div style="color: white; position: absolute; bottom: 1px; width: 250px;">
    Current User is:
    <br />
    <select @onchange="OnSelectedUserChange">
        @foreach (var user in UserList)
        {
            <option value="@user.Id">
                @user.Name
            </option>
        }
    </select>
</div>

@inject UserApiClient UserApi
@inject IJSRuntime script
@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private List<GetUserModel> UserList { get; set; } = new List<GetUserModel>();
    private UserType CurrentUserType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var getUserListResult = await UserApi.GetUserListAsync();

        if (getUserListResult.IsSuccess)
        {
            UserList = getUserListResult.Data;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }

        if (UserList.Any())
        {
            await SetSelectedUser(UserList.First().Id.ToString());
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task OnSelectedUserChange(ChangeEventArgs e)
    {
        var selectedUser = e.Value.ToString();
        await SetSelectedUser(selectedUser);
    }

    async Task SetSelectedUser(string selectedUserId)
    {
        await script.InvokeAsync<string>("console.info", "Selected User: ", selectedUserId);
        var selectedUser = UserList.First(x => x.Id.ToString() == selectedUserId);
        UserManager.CurrentUserId = selectedUser.Id.ToString();
        UserManager.CurrentUserType = selectedUser.UserType;
    }
}

