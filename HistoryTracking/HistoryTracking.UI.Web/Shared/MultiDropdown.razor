<div style="position: relative; width: 100%; height: 30px; border: 1px solid #000;">
    <div style="height: 100%; width: 100%;cursor: pointer;" @onclick="(() => IsActive = !IsActive)">
        <div style="overflow: hidden; text-overflow: ellipsis; padding: 0 30px 0 8px; vertical-align: text-top;">@MainWindowText</div>
        <i class="fa fa-chevron-down" aria-hidden="true" style="position: absolute; top: 8px; right: 6px; font-size: 11px;"></i>
    </div>
    <div hidden="@(!IsActive)" style=" position: absolute; left: 0px; top: 30px; background-color: #fff; width: 100%; font-size: 12px; box-shadow: 0 6.4px 14.4px 0 rgb(0 0 0 / 13%), 0 1.2px 3.6px 0 rgb(0 0 0 / 11%); max-height: 400px; overflow-x: hidden; overflow-y: auto; z-index: 1;">
        @foreach (var item in DictItems.Select(x=>x.Value))
        {
            <div style="margin: 2px 0;" class="@(item.IsSelected ? "grey" : "")">
                <input type="checkbox" id="@item.Key" @onchange="eventArgs => { OnCheckboxClick(item.Key, eventArgs.Value); }" 
                       style="margin: 10px 1%; width: 11%; vertical-align: bottom;cursor: pointer;"/>
                <label style="width: 85%;cursor: pointer;" for="@item.Key">@item.Text</label>
            </div>
        }
    </div>
</div>

@inject IJSRuntime Script
@code {

    [Parameter]public IEnumerable<DropdownItem> Items { get; set; } = new List<DropdownItem>();
    [Parameter]public EventCallback<List<string>> Changed { get; set; }
    private Dictionary<string, DropdownItem> DictItems { get; set; } = new Dictionary<string, DropdownItem>();
    private string Placeholder = "Select options...";
    private bool IsActive { get; set; } = false;
    private string MainWindowText { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        DictItems = Items.ToDictionary(x => x.Key, x => x);
        RefreshMainWindowText();
    }

    async Task OnCheckboxClick(string key, object isChecked)
    {
        DictItems[key].IsSelected = (bool) isChecked;
        RefreshMainWindowText();

        await Changed.InvokeAsync(DictItems.Where(x => x.Value.IsSelected).Select(x=>x.Key).ToList());
    }

    void RefreshMainWindowText()
    {
        if (!DictItems.Any(x => x.Value.IsSelected))
        {
            MainWindowText = Placeholder;
            return;
        }

        MainWindowText = DictItems.Where(x => x.Value.IsSelected).Select(x=>x.Value.Text).Join(",");
        if (MainWindowText.Length > 40)
        {
            MainWindowText = MainWindowText.Substring(0, 38) + "...";
        }
    }
}

<style>    
    .grey {background-color: #eee}
</style>