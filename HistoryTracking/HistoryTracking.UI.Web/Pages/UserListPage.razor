@page "/users"

<h3>Users</h3>

<PageViewer PageModel="@Model">
    @if (Model.UserList.Any())
    {
        <br />
        <br />
        <table class="table table-hover">
            <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>User Type</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
                @foreach (var user in Model.UserList)
                {
                    <tr>
                        <td>@user.Name</td>
                        <td>@user.Email</td>
                        <td>@user.UserType</td>
                        <td>
                            <a href="/users/@user.Id" style="text-decoration: underline;">
                                edit
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <br />
        <br />
        <br />
        <br />
        <br />
        <p>User list is empty. Please add users.</p>
    }


    <a href='/users/Add'>
        <span class="oi oi-plus" aria-hidden="true" style="vertical-align: text-bottom"></span> <span style="text-decoration: underline;">add</span>
    </a>
</PageViewer>

<style>
    .table {
        text-align: center;
    }

    .table th {
        text-align: start;
    }

    .table td {
        text-align: start;
    }
</style>



@using HistoryTracking.UI.Web.ApiRequests
@using HistoryTracking.BL.Services.User
@using HistoryTracking.UI.Web.PageModels
@inject UserApiClient UserApi
@code {

    private UserListPageModel Model = new UserListPageModel();

    protected override async Task OnInitializedAsync()
    {
        var getUserListResult = await UserApi.GetUserListAsync();
        if (!getUserListResult.IsSuccess)
        {
            ShowError(getUserListResult.ErrorMessage);
            return;
        }
        Model.UserList = getUserListResult.Data;

        Model.IsReady = true;
    }


    void ShowError(string errorMessage)
    {
        Model.ErrorMessage = errorMessage;
    }
}
