@page "/users/{SelectedUser}"

<h3>@GetTitle()</h3>
<br />
<PageViewer PageModel="@Model">
    <div class="row">
        <div class="col-2">
            Name
        </div>
        <div class="col-2">
            <input @bind="Model.UserConfig.Name" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-2">
            Email
        </div>
        <div class="col-2">
            <input @bind="Model.UserConfig.Email" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-2">
            User Type
        </div>
        <div class="col-2">
            <select @bind="Model.UserConfig.UserType">
                @foreach (var userType in Model.UserTypeList)
                {
                <option value="@userType">
                    @userType
                </option>
                }
            </select>
        </div>
    </div>
    <br />
    <br />
    <div class="row">
        <div class="col-2">
            <button @onclick="OnSaveBtnClick" class="btn btn-success" style="width: 130px; margin-right: 10px;">Save</button>
            <a href="/users" class="btn btn-outline-info">Cancel</a>
        </div>
    </div>
</PageViewer>



@using HistoryTracking.DAL.Enums
@inject UserApiClient UserApi
@inject NavigationManager Navigation
@inject IJSRuntime script
@code {
    [Parameter]
    public string SelectedUser { get; set; }
    private UserAddEditPageModel Model { get; } = new UserAddEditPageModel();

    protected override async Task OnInitializedAsync()
    {
        Model.IsAddingNewOne = SelectedUser == "Add";

        var getUserTypeListResult = await UserApi.GetUserTypeListAsync();
        if (!getUserTypeListResult.IsSuccess)
        {
            ShowError(getUserTypeListResult.ErrorMessage);
            return;
        }
        Model.UserTypeList = getUserTypeListResult.Data;

        if (Model.IsAddingNewOne)
        {
            Model.UserConfig = new AddEditUserModel
            {
                UserType = UserType.Customer
            };
        }
        else
        {
            var getCurrentUserConfigResult = await UserApi.GetUserAsync(new Guid(SelectedUser));
            if (!getCurrentUserConfigResult.IsSuccess)
            {
                ShowError(getCurrentUserConfigResult.ErrorMessage);
                return;
            }
            var currentUserConfig = getCurrentUserConfigResult.Data;
            Model.UserConfig = new AddEditUserModel
            {
                Id = currentUserConfig.Id,
                Name = currentUserConfig.Name,
                Email = currentUserConfig.Email,
                UserType = currentUserConfig.UserType
            };
        }

        Model.IsReady = true;
    }

    async Task OnSaveBtnClick()
    {
        await script.InvokeAsync<string>("console.log", "Save: ", Model.UserConfig.ToJson());
        var saveResult = await UserApi.AddEditUserAsync(Model.UserConfig);

        if (!saveResult.IsSuccess)
        {
            ShowError(saveResult.ErrorMessage);
            return;
        }

        Navigation.NavigateTo("users");
    }

    string GetTitle()
    {
        if (Model.IsAddingNewOne)
        {
            return "Add User";
        }

        return "Edit User";
    }

    void ShowError(string errorMessage)
    {
        Model.ErrorMessage = errorMessage;
    }
}
